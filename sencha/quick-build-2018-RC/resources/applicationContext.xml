<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context.xsd
	    http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx.xsd
	    http://www.springframework.org/schema/jdbc
	    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	    http://www.springframework.org/schema/cache
	    http://www.springframework.org/schema/cache/spring-cache.xsd
	    http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/util
	    http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在spring-mvc.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="com.jhopesoft">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:application.properties</value>
			</list>
		</property>
	</bean>

	<!-- dataSource 配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${ds.initialSize}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${ds.minIdle}" />
		<!-- 连接池最大使用连接数 -->
		<property name="maxActive" value="${ds.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${ds.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}" />
		<!-- 自动清除无用连接 -->
		<property name="removeAbandoned" value="${ds.removeAbandoned}" />
		<!-- 清除无用连接的等待时间 -->
		<property name="removeAbandonedTimeout" value="${ds.removeAbandonedTimeout}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效 -->
		<property name="testOnBorrow" value="true" />
		<!-- 归还连接时执行validationQuery检测连接是否有效 -->
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="wall,stat" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!--<prop key="hibernate.hbm2ddl.auto">create</prop> 自动创建表结构 -->
				<!--<prop key="hibernate.hbm2ddl.auto">update</prop> 自动更新表结构 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>

				<!-- 开启二级缓存 ehcache -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- 开启查询的二级缓存 如果不需要就不设置 -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<!-- Hibernate4.0以上设置factory -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
				<!-- 二级缓存 ehcache的配置文件位置 -->
				<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache.xml</prop>

			</props>
		</property>
		<property name="packagesToScan" value="com.jhopesoft.**.entity" />
	</bean>

	<!-- 配置一个事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 定义以下开头的方法名都是只读的模式 -->
			<tx:method name="select*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<!-- 其他所有方法都使用事务 -->
			<tx:method name="*" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务 aop 配置 -->
	<aop:config>
		<!-- 定义一个切入点 -->
		<aop:pointcut id="serviceMethods"
			expression="execution(* com.jhopesoft..*.service.*Service.*(..))" />
		<!-- 对切入点和事务的通知，进行适配 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"
			order="2" />
	</aop:config>

	<!-- aop拦截控制 -->
	<bean class="com.jhopesoft.framework.interceptor.annotation.SystemLogAspect" />

	<!-- 启用对事务注解的支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 文件上传 -->
	<bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver" p:defaultEncoding="utf-8" />

	<!-- 获取项目配置 -->
	<bean id="contextAware"
		class="com.jhopesoft.framework.context.contextAware.SContextAware" />
	<bean id="appContextAware"
		class="com.jhopesoft.framework.context.contextAware.AppContextAware" />

	<!-- 项目环境资源 -->
	<bean class="com.jhopesoft.framework.context.ProjectContext" id="projectContext">
	</bean>

	<!-- Activiti 工作流引擎配置 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<!-- <property name="databaseSchema" value="ACT"/> -->
		<property name="jobExecutorActivate" value="false" />
		<!-- 生成流程图的字体 -->
		<property name="activityFontName" value="宋体" />
		<property name="labelFontName" value="宋体" />
	</bean>
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	<!-- 工作流仓储服务 -->
	<bean id="repositoryService" factory-bean="processEngine"
		factory-method="getRepositoryService" />
	<!-- 工作流运行服务 -->
	<bean id="runtimeService" factory-bean="processEngine"
		factory-method="getRuntimeService" />
	<!-- 工作流唯一服务 -->
	<bean id="identityService" factory-bean="processEngine"
		factory-method="getIdentityService" />
	<!-- 工作流任务服务 -->
	<bean id="taskService" factory-bean="processEngine"
		factory-method="getTaskService" />
	<!-- 工作流历史数据服务 -->
	<bean id="historyService" factory-bean="processEngine"
		factory-method="getHistoryService" />
	<!-- 工作流管理服务 -->
	<bean id="managementService" factory-bean="processEngine"
		factory-method="getManagementService" />
	<bean id="formService" factory-bean="processEngine"
		factory-method="getFormService" />
	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />

	<!-- 系统初始化 -->
	<bean class="com.jhopesoft.framework.context.ProjectInitialize" />

</beans>
